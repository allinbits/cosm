import axios from "axios";
import {
  createWalletFromMnemonic,
  signTx,
  createBroadcastTx,
} from "@tendermint/sig";
import * as bip39 from "bip39";

const API = "http://localhost:8010/proxy";
const chain_id = "<%= AppName %>";

let mnemonic, wallet;
let balance = 0;

const createAccount = () => {
  mnemonic = bip39.generateMnemonic();
  wallet = createWalletFromMnemonic(mnemonic);
  document.querySelector(
    ".account-address"
  ).innerHTML = `Address: <code>${wallet.address}</code>`;
  balance = 0;
  document.querySelector(".account-balance").innerHTML = "";
};

const requestTokens = () => {
  axios.post(`${API}/faucet`, { address: wallet.address }).then(() => {
    balance++;
    document.querySelector(
      ".account-balance"
    ).innerHTML = `Balance: <code>${balance}</code>`;
  });
};

const types = [
  // this line is used by startport scaffolding
];

const init = () => {
  document
    .querySelector(".account-create")
    .addEventListener("click", createAccount);
  document
    .querySelector(".account-request-tokens")
    .addEventListener("click", requestTokens);
  types.forEach((t) => {
    const type = t[0];
    const fields = t[1];
    fetchList(type);
    document
      .querySelector(`.type-${type}-create`)
      .addEventListener("click", () => createType(type, fields));
  });
};

const fetchList = (type) => {
  axios.get(`${API}/${chain_id}/${type}`).then(({ data }) => {
    const result = data.result || [];
    let content = "";
    result.forEach((item) => {
      Object.keys(item).forEach((key) => {
        content += `<p><strong>${key}</strong>: ${item[key]}</p>`;
      });
      content += "<hr/>";
    });
    const selector = `.type-${type}-list-${type}`;
    document.querySelector(selector).innerHTML = content;
  });
};

const createType = (type, fields) => {
  const reqBody = {};
  fields.forEach((field) => {
    const selector = `.type-${type}-field-${field}`;
    reqBody[field] = document.querySelector(selector).value;
  });
  axios.get(`${API}/auth/accounts/${wallet.address}`).then(({ data }) => {
    const account = data.result.value;
    const meta = {
      sequence: `${account.sequence}`,
      account_number: `${account.account_number}`,
      chain_id,
    };
    const req = {
      base_req: {
        chain_id,
        from: wallet.address,
      },
      creator: wallet.address,
      ...reqBody,
    };
    axios.post(`${API}/${chain_id}/${type}`, req).then(({ data }) => {
      const tx = data.value;
      const stdTx = signTx(tx, meta, wallet);
      const txBroadcast = createBroadcastTx(stdTx, "block");
      const params = {
        headers: {
          "Content-Type": "application/json",
        },
      };
      axios.post(`${API}/txs`, txBroadcast, params).then(() => {
        fetchList(type);
      });
    });
  });
};

init();
