package cli

import (
	"bufio"
  <%= if (strconv()) { %>"strconv"<% } %>
	"github.com/spf13/cobra"

	"github.com/cosmos/cosmos-sdk/client/context"
	"github.com/cosmos/cosmos-sdk/codec"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/cosmos/cosmos-sdk/x/auth"
	"github.com/cosmos/cosmos-sdk/x/auth/client/utils"
	"<%= ModulePath %>/x/<%= AppName %>/types"
)

func GetCmdCreate<%= title(TypeName) %>(cdc *codec.Codec) *cobra.Command {
	return &cobra.Command{
		Use:   "create-<%= TypeName %><%= for (i, field) in Fields { %> [<%= field.Name %>]<% } %>",
		Short: "Creates a new <%= TypeName %>",
		Args:  cobra.MinimumNArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
      <%= for (i, field) in Fields { %>args<%= title(field.Name) %><%= if (field.Datatype != "string") {%>, _<%}%> := <%= if (field.Datatype == "string") {%>string<%} else {%>strconv.Parse<%= title(field.Datatype) %><%}%>(args[<%= i %>])
      <% } %>
			cliCtx := context.NewCLIContext().WithCodec(cdc)
			inBuf := bufio.NewReader(cmd.InOrStdin())
			txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))
			msg := types.NewMsgCreate<%= title(TypeName) %>(cliCtx.GetFromAddress()<%= for (i, field) in Fields { %>, args<%= title(field.Name) %><% } %>)
			err := msg.ValidateBasic()
			if err != nil {
				return err
			}
			return utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg{msg})
		},
	}
}